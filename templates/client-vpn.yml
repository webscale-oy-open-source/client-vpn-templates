AWSTemplateFormatVersion: 2010-09-09
Description: 'Client VPN'

Parameters:
  ApplicationName:
    Description: Name of the application
    Type: String
  ServerCertificateArn:
    Description: End of server certificate arn
    Type: String
  ClientCidrBlock:
    Description: The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The CIDR block should be /22 or greater
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnetIds:
    Description: IDs of private subnets which will be used as target networks
    Type: List<String>
  EnableConnectionLogs:
    Description: Boolean value for enabling VPN connection logging. Default false.
    Type: String
    Default: false
  DnsServers:
    Description: List of DNS server IP addresses
    Type: List<String>
    AllowedPattern: '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'

Conditions:
  EnableConnectionLogs: !Not [ !Equals [ !Ref EnableConnectionLogs, 'false' ] ]

Resources:
  ClientVPN:
    Type: AWS::EC2::ClientVpnEndpoint
    Properties: 
      DnsServers: !Ref DnsServers
      AuthenticationOptions: 
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref ServerCertificateArn
      ClientCidrBlock: !Ref ClientCidrBlock
      ConnectionLogOptions:
        !If
          - EnableConnectionLogs
          - Enabled: true
            CloudwatchLogGroup: !Ref ClientVPNLogGroup
            CloudwatchLogStream: !Ref LogStream
          - Enabled: false
      ServerCertificateArn: !Ref ServerCertificateArn

  ClientVPNLogGroup:
    Condition: EnableConnectionLogs
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /vpn/${ApplicationName}

  LogStream:
    Condition: EnableConnectionLogs
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref ClientVPNLogGroup
      LogStreamName: TempLogStream

  AuthorizationRule:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties:
      ClientVpnEndpointId: !Ref ClientVPN
      AuthorizeAllGroups: true
      TargetNetworkCidr: 0.0.0.0/0

  TargetNetwork1:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]

  TargetNetwork2:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      SubnetId: !Select [ 1, !Ref PrivateSubnetIds ]

  TargetNetwork3:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      SubnetId: !Select [ 2, !Ref PrivateSubnetIds ]

  InternetRoute1:
    DependsOn: TargetNetwork1
    Type: AWS::EC2::ClientVpnRoute
    Properties:
      ClientVpnEndpointId: !Ref ClientVPN
      DestinationCidrBlock: 0.0.0.0/0
      TargetVpcSubnetId: !Select [ 0, !Ref PrivateSubnetIds ]

  InternetRoute2:
    DependsOn: TargetNetwork2
    Type: AWS::EC2::ClientVpnRoute
    Properties:
      ClientVpnEndpointId: !Ref ClientVPN
      DestinationCidrBlock: 0.0.0.0/0
      TargetVpcSubnetId: !Select [ 1, !Ref PrivateSubnetIds ]

  InternetRoute3:
    DependsOn: TargetNetwork3
    Type: AWS::EC2::ClientVpnRoute
    Properties:
      ClientVpnEndpointId: !Ref ClientVPN
      DestinationCidrBlock: 0.0.0.0/0
      TargetVpcSubnetId: !Select [ 2, !Ref PrivateSubnetIds ]

Outputs:
  ClientVPNId:
    Description: Id of the created client VPN
    Value: !Ref ClientVPN
    Export:
      Name: !Sub ${AWS::StackName}:ClientVPNId